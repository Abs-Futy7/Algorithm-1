Algorithm Kosaraju_SCC(nodeCount):
    1. Create adjacency list `g` for original graph
    2. Create adjacency list `rg` for reversed graph
    3. Create a `visited` array initialized to false
    4. Create an empty `stack`
    5. Create `sccList` to store SCCs

    // Step 1: First DFS pass (on original graph)
    For each node i from 1 to nodeCount:
        visited[i] ← false  // Manually reset visited array
    For each node i from 1 to nodeCount:
        If visited[i] = false:
            Call DFS1(i)

    // Step 2: Second DFS pass (on reversed graph)
    For each node i from 1 to nodeCount:
        visited[i] ← false  // Manually reset visited array

    While stack is not empty:
        node ← stack.pop()
        If visited[node] = false:
            Create empty `component`
            Call DFS2(node, component)
            Add `component` to `sccList`

    Return `sccList` as the list of strongly connected components


// DFS1: First DFS pass to record finishing times
Function DFS1(node):
    visited[node] ← true
    For each child in g[node]:
        If visited[child] = false:
            Call DFS1(child)
    Push node onto stack  // Store nodes in order of completion


// DFS2: Second DFS pass to find SCCs in reversed graph
Function DFS2(node, component):
    visited[node] ← true
    Add node to component
    For each child in rg[node]:
        If visited[child] = false:
            Call DFS2(child, component)
