Algorithm ShortestPathDAG(V, E, edges, src):
    1. Initialize adjacency list `g` with V empty lists
    2. Initialize distance array `dist` with ∞ (Infinity) for all nodes
    3. Set `dist[src] = 0`
    4. Create a stack `topoStack` for storing topological order
    5. Create a boolean array `visited` of size V and initialize with `false`

    // Step 1: Perform Topological Sorting using DFS
    Procedure TopologicalSort(node, visited, topoStack):
        1. Mark `visited[node] = true`
        2. For each neighbor `(v, weight)` of `node` in `g[node]`:
            a. If `visited[v]` is false, call `TopologicalSort(v, visited, topoStack)`
        3. Push `node` onto `topoStack`

    // Step 2: Compute Topological Order
    For each node `i` in range (0, V):
        If `visited[i]` is false:
            Call `TopologicalSort(i, visited, topoStack)`

    // Step 3: Process nodes in topological order
    While `topoStack` is not empty:
        1. Pop `node` from `topoStack`
        2. If `dist[node]` is not ∞:
            a. For each `(v, weight)` in `g[node]`:
                i. If `dist[node] + weight < dist[v]`, update `dist[v] = dist[node] + weight`

    // Step 4: Print shortest distances
    For each node `i` in range (0, V):
        Print "Node i -> dist[i]" (If dist[i] is ∞, print "INF")

End Algorithm




Time Complexity Analysis
    Topological Sorting (DFS) → O(V + E)
    Relaxation using topological order → O(V + E)
    Total Complexity → O(V + E)
        Much faster than Dijkstra’s O(E log V) for DAGs
